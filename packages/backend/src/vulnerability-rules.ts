import type { Severity, VulnerabilityType } from "./types";

export interface VulnerabilityRule {
  type: VulnerabilityType;
  severity: Severity;
  title: string;
  description: string;
  remediation: string;
  cweId?: number;
}

export const VULNERABILITY_RULES: Record<VulnerabilityType, VulnerabilityRule> =
  {
    "script-wildcard": {
      type: "script-wildcard",
      severity: "high",
      title: "Script Wildcard Usage",
      description:
        "The CSP policy allows scripts from any domain using wildcard (*). This removes XSS protection and allows attackers to load malicious scripts from any external domain.",
      remediation:
        "Replace the wildcard (*) with specific trusted domains. Use 'self' for same-origin scripts or list specific trusted CDNs.",
      cweId: 79,
    },

    "script-unsafe-inline": {
      type: "script-unsafe-inline",
      severity: "high",
      title: "Unsafe Inline Scripts Allowed",
      description:
        "The CSP policy allows inline JavaScript execution using 'unsafe-inline'. This removes XSS protection by allowing inline script tags and event handlers.",
      remediation:
        "Remove 'unsafe-inline' and use nonces ('nonce-<value>') or hashes ('sha256-<hash>') for legitimate inline scripts.",
      cweId: 79,
    },

    "script-unsafe-eval": {
      type: "script-unsafe-eval",
      severity: "high",
      title: "Unsafe Eval Allowed",
      description:
        "The CSP policy allows dynamic code execution using 'unsafe-eval'. This enables DOM-based XSS attacks through eval(), Function() constructor, and similar methods.",
      remediation:
        "Remove 'unsafe-eval' and refactor code to avoid dynamic script evaluation. Use safer alternatives like JSON.parse() instead of eval().",
      cweId: 79,
    },

    "style-wildcard": {
      type: "style-wildcard",
      severity: "low",
      title: "Style Wildcard Usage",
      description:
        "The CSP policy allows stylesheets from any domain using wildcard (*). While less dangerous than script wildcards, this can still be exploited for clickjacking or data exfiltration.",
      remediation:
        "Replace the wildcard (*) with specific trusted domains or 'self' for same-origin stylesheets.",
      cweId: 79,
    },

    "style-unsafe-inline": {
      type: "style-unsafe-inline",
      severity: "medium",
      title: "Unsafe Inline Styles Allowed",
      description:
        "The CSP policy allows inline CSS using 'unsafe-inline'. This can be exploited for clickjacking attacks and data exfiltration through CSS.",
      remediation:
        "Remove 'unsafe-inline' and use nonces or hashes for legitimate inline styles, or move styles to external stylesheets.",
      cweId: 79,
    },

    "user-content-host": {
      type: "user-content-host",
      severity: "high",
      title: "User Content Host Allowed",
      description:
        "The CSP policy allows loading resources from a domain that hosts user-uploaded content. Attackers can upload malicious scripts to these platforms.",
      remediation:
        "Remove user content domains from the CSP policy. If required, implement additional security measures like SRI (Subresource Integrity).",
      cweId: 79,
    },

    "vulnerable-js-host": {
      type: "vulnerable-js-host",
      severity: "high",
      title: "Vulnerable JavaScript Library Host",
      description:
        "The CSP policy allows loading resources from a domain known to host vulnerable JavaScript libraries that can be exploited by attackers.",
      remediation:
        "Remove the vulnerable host from the CSP policy or ensure only safe, up-to-date library versions are used.",
      cweId: 79,
    },

    "deprecated-header": {
      type: "deprecated-header",
      severity: "medium",
      title: "Deprecated CSP Header",
      description:
        "The application uses a deprecated CSP header name. Modern browsers may not properly enforce these policies.",
      remediation:
        "Replace deprecated headers (X-Content-Security-Policy, X-WebKit-CSP) with the standard Content-Security-Policy header.",
    },

    "wildcard-limited": {
      type: "wildcard-limited",
      severity: "info",
      title: "Limited Wildcard Usage",
      description:
        "The CSP policy uses wildcards in directives with limited security impact. While not immediately dangerous, this reduces the specificity of the policy.",
      remediation:
        "Consider replacing wildcards with specific trusted domains for better security posture.",
    },

    // Enhanced modern vulnerabilities
    "script-data-uri": {
      type: "script-data-uri",
      severity: "high",
      title: "Data URI Scripts Allowed",
      description:
        "The CSP policy allows base64-encoded JavaScript execution via data: URIs, which can bypass XSS protection.",
      remediation:
        "Remove 'data:' from script-src. Use proper script files or nonces/hashes for inline scripts.",
      cweId: 79,
    },

    "object-wildcard": {
      type: "object-wildcard",
      severity: "high", 
      title: "Unrestricted Object/Plugin Sources",
      description:
        "The CSP policy allows loading objects/plugins from any source, creating potential for code execution.",
      remediation:
        "Set object-src to 'none' or specify trusted sources only.",
      cweId: 79,
    },

    "jsonp-bypass-risk": {
      type: "jsonp-bypass-risk",
      severity: "high",
      title: "JSONP Callback Bypass Risk", 
      description:
        "The CSP policy allows domains that support JSONP callbacks, which can bypass CSP protection.",
      remediation:
        "Remove JSONP-enabled hosts or use fetch() with proper CORS instead.",
      cweId: 79,
    },

    "angularjs-bypass": {
      type: "angularjs-bypass",
      severity: "high",
      title: "AngularJS Template Injection Risk",
      description:
        "The CSP policy allows AngularJS versions that permit template injection bypasses.",
      remediation:
        "Upgrade to Angular 2+ or remove AngularJS entirely.",
      cweId: 79,
    },

    "missing-trusted-types": {
      type: "missing-trusted-types",
      severity: "medium",
      title: "Missing Trusted Types Protection",
      description:
        "Trusted Types policy not configured - DOM XSS protection unavailable.",
      remediation:
        "Add 'trusted-types' directive to enable DOM XSS protection.",
    },

    "missing-require-trusted-types": {
      type: "missing-require-trusted-types",
      severity: "medium",
      title: "Trusted Types Not Required",
      description:
        "DOM manipulation not restricted to Trusted Types.",
      remediation:
        "Add 'require-trusted-types-for \"script\"' directive.",
    },

    "missing-essential-directive": {
      type: "missing-essential-directive",
      severity: "medium",
      title: "Missing Essential Directive",
      description:
        "A critical security directive is not defined in the CSP policy.",
      remediation:
        "Add the missing essential directive with appropriate values.",
    },

    "permissive-base-uri": {
      type: "permissive-base-uri",
      severity: "medium",
      title: "Permissive Base URI Policy",
      description:
        "Unrestricted base URI can enable injection attacks.",
      remediation:
        "Set base-uri to 'self' or specific trusted origins.",
    },

    "nonce-unsafe-inline-conflict": {
      type: "nonce-unsafe-inline-conflict",
      severity: "medium",
      title: "Nonce Security Weakened",
      description:
        "Nonce protection is bypassed when 'unsafe-inline' is also present.",
      remediation:
        "Remove 'unsafe-inline' when using nonces for better security.",
    },

    // Modern threat categories
    "ai-ml-host": {
      type: "ai-ml-host",
      severity: "medium",
      title: "AI/ML Service Integration Risk",
      description:
        "The CSP policy allows AI/ML service endpoints that could be exploited.",
      remediation:
        "Review necessity of AI/ML service integration and implement additional security controls.",
    },

    "web3-host": {
      type: "web3-host",
      severity: "medium",
      title: "Web3/Crypto Integration Risk",
      description:
        "The CSP policy allows Web3/cryptocurrency service endpoints that could pose security risks.",
      remediation:
        "Review necessity of Web3 integration and implement additional security controls.",
    },

    "cdn-supply-chain": {
      type: "cdn-supply-chain",
      severity: "medium",
      title: "CDN Supply Chain Risk",
      description:
        "The CSP policy allows CDN endpoints that have been compromised in supply chain attacks.",
      remediation:
        "Review necessity of CDN integration and implement additional security controls like SRI.",
    },

    "supply-chain-risk": {
      type: "supply-chain-risk",
      severity: "medium",
      title: "Supply Chain Risk",
      description:
        "The CSP policy allows endpoints that pose supply chain security risks.",
      remediation:
        "Review necessity of integration and implement additional security controls.",
    },

    "privacy-tracking-risk": {
      type: "privacy-tracking-risk",
      severity: "low",
      title: "Privacy/Tracking Risk",
      description:
        "The CSP policy allows domains associated with user tracking or privacy concerns.",
      remediation:
        "Review necessity of tracking integration and consider privacy implications.",
    },

    "gaming-metaverse-risk": {
      type: "gaming-metaverse-risk",
      severity: "low",
      title: "Gaming/Metaverse Integration Risk",
      description:
        "The CSP policy allows gaming or metaverse service endpoints.",
      remediation:
        "Review necessity of gaming/metaverse integration and implement appropriate security controls.",
    },
  };
