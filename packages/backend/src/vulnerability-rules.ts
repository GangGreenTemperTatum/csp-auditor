import type { Severity, VulnerabilityType } from "./types";

export interface VulnerabilityRule {
  type: VulnerabilityType;
  severity: Severity;
  title: string;
  description: string;
  remediation: string;
  cweId?: number;
}

export const VULNERABILITY_RULES: Record<VulnerabilityType, VulnerabilityRule> =
  {
    "script-wildcard": {
      type: "script-wildcard",
      severity: "high",
      title: "Script Wildcard Usage",
      description:
        "The CSP policy allows scripts from any domain using wildcard (*). This removes XSS protection and allows attackers to load malicious scripts from any external domain.",
      remediation:
        "Replace the wildcard (*) with specific trusted domains. Use 'self' for same-origin scripts or list specific trusted CDNs.",
      cweId: 79,
    },

    "script-unsafe-inline": {
      type: "script-unsafe-inline",
      severity: "high",
      title: "Unsafe Inline Scripts Allowed",
      description:
        "The CSP policy allows inline JavaScript execution using 'unsafe-inline'. This removes XSS protection by allowing inline script tags and event handlers.",
      remediation:
        "Remove 'unsafe-inline' and use nonces ('nonce-<value>') or hashes ('sha256-<hash>') for legitimate inline scripts.",
      cweId: 79,
    },

    "script-unsafe-eval": {
      type: "script-unsafe-eval",
      severity: "high",
      title: "Unsafe Eval Allowed",
      description:
        "The CSP policy allows dynamic code execution using 'unsafe-eval'. This enables DOM-based XSS attacks through eval(), Function() constructor, and similar methods.",
      remediation:
        "Remove 'unsafe-eval' and refactor code to avoid dynamic script evaluation. Use safer alternatives like JSON.parse() instead of eval().",
      cweId: 79,
    },

    "style-wildcard": {
      type: "style-wildcard",
      severity: "low",
      title: "Style Wildcard Usage",
      description:
        "The CSP policy allows stylesheets from any domain using wildcard (*). While less dangerous than script wildcards, this can still be exploited for clickjacking or data exfiltration.",
      remediation:
        "Replace the wildcard (*) with specific trusted domains or 'self' for same-origin stylesheets.",
      cweId: 79,
    },

    "style-unsafe-inline": {
      type: "style-unsafe-inline",
      severity: "medium",
      title: "Unsafe Inline Styles Allowed",
      description:
        "The CSP policy allows inline CSS using 'unsafe-inline'. This can be exploited for clickjacking attacks and data exfiltration through CSS.",
      remediation:
        "Remove 'unsafe-inline' and use nonces or hashes for legitimate inline styles, or move styles to external stylesheets.",
      cweId: 79,
    },

    "user-content-host": {
      type: "user-content-host",
      severity: "high",
      title: "User Content Host Allowed",
      description:
        "The CSP policy allows loading resources from a domain that hosts user-uploaded content. Attackers can upload malicious scripts to these platforms.",
      remediation:
        "Remove user content domains from the CSP policy. If required, implement additional security measures like SRI (Subresource Integrity).",
      cweId: 79,
    },

    "vulnerable-js-host": {
      type: "vulnerable-js-host",
      severity: "high",
      title: "Vulnerable JavaScript Library Host",
      description:
        "The CSP policy allows loading resources from a domain known to host vulnerable JavaScript libraries that can be exploited by attackers.",
      remediation:
        "Remove the vulnerable host from the CSP policy or ensure only safe, up-to-date library versions are used.",
      cweId: 79,
    },

    "deprecated-header": {
      type: "deprecated-header",
      severity: "medium",
      title: "Deprecated CSP Header",
      description:
        "The application uses a deprecated CSP header name. Modern browsers may not properly enforce these policies.",
      remediation:
        "Replace deprecated headers (X-Content-Security-Policy, X-WebKit-CSP) with the standard Content-Security-Policy header.",
    },

    "wildcard-limited": {
      type: "wildcard-limited",
      severity: "info",
      title: "Limited Wildcard Usage",
      description:
        "The CSP policy uses wildcards in directives with limited security impact. While not immediately dangerous, this reduces the specificity of the policy.",
      remediation:
        "Consider replacing wildcards with specific trusted domains for better security posture.",
    },
  };
